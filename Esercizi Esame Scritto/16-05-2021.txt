Inizio 19.30

Esercizio c.1

Un buffer sincrono strampalato (bss) ha due procedure entry:
void put(T value)
list of T get(void)
La entry put viene utilizzata per aggiungere un elemento e la entry get per leggere tutti quelli disponibili.
Se più processi chiamano la put quando nessun processo è in attesa per una get, rimangono tutti bloccati. 
Quando successivamente un processo chiama la get riceve la lista di tutti gli elementi inseriti con le put e 
tutti i processi vengono sbloccati.
Se il buffer è vuoto tutti i processi che chiamano la get rimangono bloccati. quando un processo chiama 
successivamente la put tutti i processi in attesa per la get si sbloccano e ricevono lo stesso valore di ritorno: 
una lista contenente il solo valore passato come parametro alla put.

monitor bss {

List of T Elements;
int numGet;
int numPut;
condition ok2get;
condition ok2put;
bool blockedG = false;
bool blockedP = false;

procedure entry void put(T value) {
    if(blockedG) {
        Elements.add(value);
        while(numGet != 0) {
            condition ok2get.signal();
            numGet--;
        }
    }

    if(numGet == 0) {
        numPut++;
        if(!blockedP) blockedP = true;
        condition ok2put.wait();
        Elements.add(value);
    }
    

}

procedure entry list of T get(void) {
    if (blockedP) {
        while (numPut != 0) {
            condition ok2put.signal();
            numPut --;
        }
    }

    if(Elements.isEmpty()) {
        numGet++;
        if(!blockedG) blockedG = true;
        condition ok2get.wait();
    }

    return Elements;


}

}


Esercizio c.2

Dato un servizio di message passing asincrono implementare un servizio di message passing 
asincrono a selezione di mittenti (samp) senza fare uso di processi server.
Il servizio samp ha due primitive:
sasend(message , destination)
sarecv(senders)
dove senders è un insieme.
la sarecv restituisce il primo messaggio che uno dei processi in senders ha spedito al processo ricevente 
usando la sasend (o spedito da qualsiasi processo se senders è vuoto)




sasend(message , destination) {
    asend(<message,getpid()> destination);
}



sarecv(senders) { // senders e' un insieme, restituisce il primo messaggio che uno dei processi in senders ha spedito al processo ricevente usando la sasend (o spedito da qualsiasi processo se senders e' vuoto)

    while (true) {
        msg, pid = arecv(ANY);

        if (isEmpty(senders)) {
            return msg;
        }

        for sender in senders 
            if(sender == pid) {
                return msg;
            } 
    }
}




Esercizio g.1



Lo scheduler RM è a priorità statica, preemptive e gestisce processi periodici (processi che si 
riattivano periodicamente, allo scadere di un periodo se ne attiva una nuova istanza). Sono processi che 
fanno solo calcolo. Al fine di questo esercizio il costo del context switch sia considerato nullo.
Si considerino due sistemi. Sistema A: sono presenti 3 processi:
Processo Periodo Priorità tempo di elaborazione
p1 15 massima 5
p2 20 media 5
p3 25 minima 6
Sistema B: sono presenti 3 processi:
Processo Periodo Priorità tempo di elaborazione
p1 8 massima 2
p2 16 media 4
p3 32 minima 16
I processi del sistema A sono schedulabili con RM? (si può costruire uno schedule di durata indefinita che 
consenta di eseguire tutti i processi). E i processi del sistema B?




0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
1 1 1 1 1 2 2 2 2 2 2  3  3  3  3  3  1  1  1  1  1  2  2  2  2  2 
                                   p1            p2              p3 

1 fine p1
           1 fine p2;    
                    riattivazione p1;
                                        2 fine p1;
                                  riattivazione p2;    
                                                       2 fine p2;
                                                Si riattiva p3 ma non riesco a terminare p3;



Il sistema A non schedulabile perche' non riesco a terminare il processo p3 prima della sua riattivazione.


0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
1 1 2 2 2 2 3 3 3 1 1  3  3  3  3  3  1  1  2  2  2  2  3  3  1  1  3  3  3  3  3  3  1  1  2  2  2  2 ....
p1  p2      p3    p1                  p1p2                    p1                     p1p2p3 
                  


Si sono schedulabili perche' riesco a terminare tutti i processi prima che un'altra istanza dello stesso processo si riattivi.

Esercizio g.2

- Si puo' risolvere sospendendo un processo perche' la situazione di trashing e' quando i processi passano piu' tempo a "combattere" per ottenere frame in memoria che in esecuzione, quindi sospendendo i processi si risolve la situazione.

- Passa il controllo ad un codice del sistema operativo chiamato interrupt handler, che esegue la richiesta di I/O e ritorna il controllo al processo bloccato, o ad un altro processo, segnalando la fine dell'operazione tramite un interrupt

- Metodo crittografico a singola chiave perche' le capability non possono essere coniate, si trovano sul processo, possono essere lette ma non modificate.

- Perche' con due dischi non riusciremmo a salvare in maniera adeguata gli strip di parita'.

                                                    
                                                    

